// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package repositories

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const bulkAssociateFeatureFlagWithRules = `-- name: BulkAssociateFeatureFlagWithRules :exec
INSERT INTO feature_flags_rules (feature_flag_id, rule_id)
SELECT $1, unnest($2::int[])
ON CONFLICT DO NOTHING
`

type BulkAssociateFeatureFlagWithRulesParams struct {
	FeatureFlagID int32   `json:"feature_flag_id"`
	Column2       []int32 `json:"column_2"`
}

func (q *Queries) BulkAssociateFeatureFlagWithRules(ctx context.Context, arg BulkAssociateFeatureFlagWithRulesParams) error {
	_, err := q.db.ExecContext(ctx, bulkAssociateFeatureFlagWithRules, arg.FeatureFlagID, pq.Array(arg.Column2))
	return err
}

const bulkCreateRulesForFeatureFlag = `-- name: BulkCreateRulesForFeatureFlag :many
INSERT INTO rules (feature_flag_id, field, operator, value)
SELECT 
    $1::int as feature_flag_id,
    unnest($2::text[]) as field,
    unnest($3::text[]) as operator,
    unnest($4::text[]) as value
RETURNING id, feature_flag_id, field, operator, value, created_at, updated_at
`

type BulkCreateRulesForFeatureFlagParams struct {
	Column1 int32    `json:"column_1"`
	Column2 []string `json:"column_2"`
	Column3 []string `json:"column_3"`
	Column4 []string `json:"column_4"`
}

func (q *Queries) BulkCreateRulesForFeatureFlag(ctx context.Context, arg BulkCreateRulesForFeatureFlagParams) ([]Rule, error) {
	rows, err := q.db.QueryContext(ctx, bulkCreateRulesForFeatureFlag,
		arg.Column1,
		pq.Array(arg.Column2),
		pq.Array(arg.Column3),
		pq.Array(arg.Column4),
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Rule
	for rows.Next() {
		var i Rule
		if err := rows.Scan(
			&i.ID,
			&i.FeatureFlagID,
			&i.Field,
			&i.Operator,
			&i.Value,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createFeatureFlag = `-- name: CreateFeatureFlag :one
INSERT INTO feature_flags (name, enabled)
VALUES ($1, $2)
RETURNING id, name, enabled, created_at, updated_at
`

type CreateFeatureFlagParams struct {
	Name    string `json:"name"`
	Enabled bool   `json:"enabled"`
}

func (q *Queries) CreateFeatureFlag(ctx context.Context, arg CreateFeatureFlagParams) (FeatureFlag, error) {
	row := q.db.QueryRowContext(ctx, createFeatureFlag, arg.Name, arg.Enabled)
	var i FeatureFlag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createRule = `-- name: CreateRule :one
INSERT INTO rules (
    feature_flag_id,
    field,
    operator,
    value
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, feature_flag_id, field, operator, value, created_at, updated_at
`

type CreateRuleParams struct {
	FeatureFlagID sql.NullInt32 `json:"feature_flag_id"`
	Field         string        `json:"field"`
	Operator      string        `json:"operator"`
	Value         string        `json:"value"`
}

func (q *Queries) CreateRule(ctx context.Context, arg CreateRuleParams) (Rule, error) {
	row := q.db.QueryRowContext(ctx, createRule,
		arg.FeatureFlagID,
		arg.Field,
		arg.Operator,
		arg.Value,
	)
	var i Rule
	err := row.Scan(
		&i.ID,
		&i.FeatureFlagID,
		&i.Field,
		&i.Operator,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteFeatureFlag = `-- name: DeleteFeatureFlag :exec
DELETE FROM feature_flags
WHERE id = $1
`

func (q *Queries) DeleteFeatureFlag(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteFeatureFlag, id)
	return err
}

const deleteRulesByFeatureFlag = `-- name: DeleteRulesByFeatureFlag :exec
DELETE FROM rules
WHERE feature_flag_id = $1
`

func (q *Queries) DeleteRulesByFeatureFlag(ctx context.Context, featureFlagID sql.NullInt32) error {
	_, err := q.db.ExecContext(ctx, deleteRulesByFeatureFlag, featureFlagID)
	return err
}

const getFeatureFlagByName = `-- name: GetFeatureFlagByName :one
SELECT id, name, enabled, created_at, updated_at FROM feature_flags
WHERE name = $1
`

func (q *Queries) GetFeatureFlagByName(ctx context.Context, name string) (FeatureFlag, error) {
	row := q.db.QueryRowContext(ctx, getFeatureFlagByName, name)
	var i FeatureFlag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFeatureFlagByNameWithRules = `-- name: GetFeatureFlagByNameWithRules :many
SELECT 
    ff.id as feature_flag_id,
    ff.name as feature_flag_name,
    ff.enabled as feature_flag_enabled,
    ff.created_at as feature_flag_created_at,
    ff.updated_at as feature_flag_updated_at,
    r.id as rule_id,
    r.field as rule_field,
    r.operator as rule_operator,
    r.value as rule_value,
    r.created_at as rule_created_at,
    r.updated_at as rule_updated_at
FROM feature_flags ff
LEFT JOIN feature_flags_rules ffr ON ff.id = ffr.feature_flag_id
LEFT JOIN rules r ON ffr.rule_id = r.id
WHERE ff.name = $1
ORDER BY r.id
`

type GetFeatureFlagByNameWithRulesRow struct {
	FeatureFlagID        int32          `json:"feature_flag_id"`
	FeatureFlagName      string         `json:"feature_flag_name"`
	FeatureFlagEnabled   bool           `json:"feature_flag_enabled"`
	FeatureFlagCreatedAt sql.NullTime   `json:"feature_flag_created_at"`
	FeatureFlagUpdatedAt sql.NullTime   `json:"feature_flag_updated_at"`
	RuleID               sql.NullInt32  `json:"rule_id"`
	RuleField            sql.NullString `json:"rule_field"`
	RuleOperator         sql.NullString `json:"rule_operator"`
	RuleValue            sql.NullString `json:"rule_value"`
	RuleCreatedAt        sql.NullTime   `json:"rule_created_at"`
	RuleUpdatedAt        sql.NullTime   `json:"rule_updated_at"`
}

func (q *Queries) GetFeatureFlagByNameWithRules(ctx context.Context, name string) ([]GetFeatureFlagByNameWithRulesRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeatureFlagByNameWithRules, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeatureFlagByNameWithRulesRow
	for rows.Next() {
		var i GetFeatureFlagByNameWithRulesRow
		if err := rows.Scan(
			&i.FeatureFlagID,
			&i.FeatureFlagName,
			&i.FeatureFlagEnabled,
			&i.FeatureFlagCreatedAt,
			&i.FeatureFlagUpdatedAt,
			&i.RuleID,
			&i.RuleField,
			&i.RuleOperator,
			&i.RuleValue,
			&i.RuleCreatedAt,
			&i.RuleUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeatureFlagWithRules = `-- name: GetFeatureFlagWithRules :many
SELECT
    r.id        AS rule_id,
    r.field     AS rule_field,
    r.operator  AS rule_operator,
    r.value     AS rule_value
FROM rules AS r
JOIN feature_flags_rules AS ffr
    ON ffr.rule_id = r.id
WHERE ffr.feature_flag_id = $1
ORDER BY r.id
`

type GetFeatureFlagWithRulesRow struct {
	RuleID       int32  `json:"rule_id"`
	RuleField    string `json:"rule_field"`
	RuleOperator string `json:"rule_operator"`
	RuleValue    string `json:"rule_value"`
}

func (q *Queries) GetFeatureFlagWithRules(ctx context.Context, featureFlagID int32) ([]GetFeatureFlagWithRulesRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeatureFlagWithRules, featureFlagID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeatureFlagWithRulesRow
	for rows.Next() {
		var i GetFeatureFlagWithRulesRow
		if err := rows.Scan(
			&i.RuleID,
			&i.RuleField,
			&i.RuleOperator,
			&i.RuleValue,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFeatureFlags = `-- name: ListFeatureFlags :many
SELECT id, name, enabled, updated_at
FROM feature_flags
ORDER BY feature_flags.id
`

type ListFeatureFlagsRow struct {
	ID        int32        `json:"id"`
	Name      string       `json:"name"`
	Enabled   bool         `json:"enabled"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}

func (q *Queries) ListFeatureFlags(ctx context.Context) ([]ListFeatureFlagsRow, error) {
	rows, err := q.db.QueryContext(ctx, listFeatureFlags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListFeatureFlagsRow
	for rows.Next() {
		var i ListFeatureFlagsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Enabled,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFeatureFlagEnabled = `-- name: UpdateFeatureFlagEnabled :exec
UPDATE feature_flags
SET enabled = $2
WHERE id = $1
`

type UpdateFeatureFlagEnabledParams struct {
	ID      int32 `json:"id"`
	Enabled bool  `json:"enabled"`
}

func (q *Queries) UpdateFeatureFlagEnabled(ctx context.Context, arg UpdateFeatureFlagEnabledParams) error {
	_, err := q.db.ExecContext(ctx, updateFeatureFlagEnabled, arg.ID, arg.Enabled)
	return err
}

const updateRule = `-- name: UpdateRule :exec
UPDATE rules
SET field = $2,
    operator = $3,
    value = $4
WHERE id = $1
`

type UpdateRuleParams struct {
	ID       int32  `json:"id"`
	Field    string `json:"field"`
	Operator string `json:"operator"`
	Value    string `json:"value"`
}

func (q *Queries) UpdateRule(ctx context.Context, arg UpdateRuleParams) error {
	_, err := q.db.ExecContext(ctx, updateRule,
		arg.ID,
		arg.Field,
		arg.Operator,
		arg.Value,
	)
	return err
}

const upsertFeatureFlagByNameWithRules = `-- name: UpsertFeatureFlagByNameWithRules :one
WITH upserted_flag AS (
    INSERT INTO feature_flags (name, enabled)
    VALUES ($1, $2)
    ON CONFLICT (name) DO UPDATE
        SET enabled = EXCLUDED.enabled,
            updated_at = CURRENT_TIMESTAMP
    RETURNING id, name, enabled, created_at, updated_at
),
deleted_associations AS (
    DELETE FROM feature_flags_rules
    WHERE feature_flag_id = (SELECT id FROM upserted_flag)
),
deleted_rules AS (
    DELETE FROM rules
    WHERE feature_flag_id = (SELECT id FROM upserted_flag)
),
inserted_rules AS (
    INSERT INTO rules (feature_flag_id, field, operator, value)
    SELECT 
        (SELECT id FROM upserted_flag),
        unnest($3::text[]),
        unnest($4::text[]),
        unnest($5::text[])
    WHERE cardinality($3::text[]) > 0
    RETURNING id, feature_flag_id
),
inserted_associations AS (
    INSERT INTO feature_flags_rules (feature_flag_id, rule_id)
    SELECT ir.feature_flag_id, ir.id FROM inserted_rules ir
    RETURNING feature_flag_id, rule_id
)
SELECT id, name, enabled, created_at, updated_at FROM upserted_flag
`

type UpsertFeatureFlagByNameWithRulesParams struct {
	Name    string   `json:"name"`
	Enabled bool     `json:"enabled"`
	Column3 []string `json:"column_3"`
	Column4 []string `json:"column_4"`
	Column5 []string `json:"column_5"`
}

type UpsertFeatureFlagByNameWithRulesRow struct {
	ID        int32        `json:"id"`
	Name      string       `json:"name"`
	Enabled   bool         `json:"enabled"`
	CreatedAt sql.NullTime `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}

func (q *Queries) UpsertFeatureFlagByNameWithRules(ctx context.Context, arg UpsertFeatureFlagByNameWithRulesParams) (UpsertFeatureFlagByNameWithRulesRow, error) {
	row := q.db.QueryRowContext(ctx, upsertFeatureFlagByNameWithRules,
		arg.Name,
		arg.Enabled,
		pq.Array(arg.Column3),
		pq.Array(arg.Column4),
		pq.Array(arg.Column5),
	)
	var i UpsertFeatureFlagByNameWithRulesRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
