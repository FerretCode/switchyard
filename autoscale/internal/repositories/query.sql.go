// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package repositories

import (
	"context"
	"database/sql"
)

const createService = `-- name: CreateService :one
INSERT INTO services (
    service_id,
    job_name,
    enabled,
    railway_memory_upscale_threshold,
    railway_cpu_upscale_threshold,
    railway_memory_downscale_threshold,
    railway_cpu_downscale_threshold,
    upscale_cooldown,
    downscale_cooldown,
    min_replica_count,
    max_replica_count
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11
)
RETURNING
    service_id,
    job_name,
    enabled,
    railway_memory_upscale_threshold,
    railway_cpu_upscale_threshold,
    railway_memory_downscale_threshold,
    railway_cpu_downscale_threshold,
    upscale_cooldown,
    downscale_cooldown,
    min_replica_count,
    max_replica_count
`

type CreateServiceParams struct {
	ServiceID                       string         `json:"service_id"`
	JobName                         sql.NullString `json:"job_name"`
	Enabled                         bool           `json:"enabled"`
	RailwayMemoryUpscaleThreshold   float64        `json:"railway_memory_upscale_threshold"`
	RailwayCpuUpscaleThreshold      float64        `json:"railway_cpu_upscale_threshold"`
	RailwayMemoryDownscaleThreshold float64        `json:"railway_memory_downscale_threshold"`
	RailwayCpuDownscaleThreshold    float64        `json:"railway_cpu_downscale_threshold"`
	UpscaleCooldown                 string         `json:"upscale_cooldown"`
	DownscaleCooldown               string         `json:"downscale_cooldown"`
	MinReplicaCount                 int32          `json:"min_replica_count"`
	MaxReplicaCount                 int32          `json:"max_replica_count"`
}

func (q *Queries) CreateService(ctx context.Context, arg CreateServiceParams) (Service, error) {
	row := q.db.QueryRowContext(ctx, createService,
		arg.ServiceID,
		arg.JobName,
		arg.Enabled,
		arg.RailwayMemoryUpscaleThreshold,
		arg.RailwayCpuUpscaleThreshold,
		arg.RailwayMemoryDownscaleThreshold,
		arg.RailwayCpuDownscaleThreshold,
		arg.UpscaleCooldown,
		arg.DownscaleCooldown,
		arg.MinReplicaCount,
		arg.MaxReplicaCount,
	)
	var i Service
	err := row.Scan(
		&i.ServiceID,
		&i.JobName,
		&i.Enabled,
		&i.RailwayMemoryUpscaleThreshold,
		&i.RailwayCpuUpscaleThreshold,
		&i.RailwayMemoryDownscaleThreshold,
		&i.RailwayCpuDownscaleThreshold,
		&i.UpscaleCooldown,
		&i.DownscaleCooldown,
		&i.MinReplicaCount,
		&i.MaxReplicaCount,
	)
	return i, err
}

const deleteService = `-- name: DeleteService :exec
DELETE FROM services
WHERE service_id = $1
`

func (q *Queries) DeleteService(ctx context.Context, serviceID string) error {
	_, err := q.db.ExecContext(ctx, deleteService, serviceID)
	return err
}

const getService = `-- name: GetService :one
SELECT
    service_id,
    job_name,
    enabled,
    railway_memory_upscale_threshold,
    railway_cpu_upscale_threshold,
    railway_memory_downscale_threshold,
    railway_cpu_downscale_threshold,
    upscale_cooldown,
    downscale_cooldown,
    min_replica_count,
    max_replica_count
FROM services
WHERE service_id = $1
LIMIT 1
`

func (q *Queries) GetService(ctx context.Context, serviceID string) (Service, error) {
	row := q.db.QueryRowContext(ctx, getService, serviceID)
	var i Service
	err := row.Scan(
		&i.ServiceID,
		&i.JobName,
		&i.Enabled,
		&i.RailwayMemoryUpscaleThreshold,
		&i.RailwayCpuUpscaleThreshold,
		&i.RailwayMemoryDownscaleThreshold,
		&i.RailwayCpuDownscaleThreshold,
		&i.UpscaleCooldown,
		&i.DownscaleCooldown,
		&i.MinReplicaCount,
		&i.MaxReplicaCount,
	)
	return i, err
}

const getServicesByJobName = `-- name: GetServicesByJobName :many
SELECT
    service_id,
    job_name,
    enabled,
    railway_memory_upscale_threshold,
    railway_cpu_upscale_threshold,
    railway_memory_downscale_threshold,
    railway_cpu_downscale_threshold,
    upscale_cooldown,
    downscale_cooldown,
    min_replica_count,
    max_replica_count
FROM services
WHERE job_name = $1
ORDER BY service_id
`

func (q *Queries) GetServicesByJobName(ctx context.Context, jobName sql.NullString) ([]Service, error) {
	rows, err := q.db.QueryContext(ctx, getServicesByJobName, jobName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Service
	for rows.Next() {
		var i Service
		if err := rows.Scan(
			&i.ServiceID,
			&i.JobName,
			&i.Enabled,
			&i.RailwayMemoryUpscaleThreshold,
			&i.RailwayCpuUpscaleThreshold,
			&i.RailwayMemoryDownscaleThreshold,
			&i.RailwayCpuDownscaleThreshold,
			&i.UpscaleCooldown,
			&i.DownscaleCooldown,
			&i.MinReplicaCount,
			&i.MaxReplicaCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listServices = `-- name: ListServices :many
SELECT
    service_id,
    job_name,
    enabled,
    railway_memory_upscale_threshold,
    railway_cpu_upscale_threshold,
    railway_memory_downscale_threshold,
    railway_cpu_downscale_threshold,
    upscale_cooldown,
    downscale_cooldown,
    min_replica_count,
    max_replica_count
FROM services
ORDER BY service_id
`

func (q *Queries) ListServices(ctx context.Context) ([]Service, error) {
	rows, err := q.db.QueryContext(ctx, listServices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Service
	for rows.Next() {
		var i Service
		if err := rows.Scan(
			&i.ServiceID,
			&i.JobName,
			&i.Enabled,
			&i.RailwayMemoryUpscaleThreshold,
			&i.RailwayCpuUpscaleThreshold,
			&i.RailwayMemoryDownscaleThreshold,
			&i.RailwayCpuDownscaleThreshold,
			&i.UpscaleCooldown,
			&i.DownscaleCooldown,
			&i.MinReplicaCount,
			&i.MaxReplicaCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listServicesWithJobs = `-- name: ListServicesWithJobs :many
SELECT
    service_id,
    job_name,
    enabled,
    railway_memory_upscale_threshold,
    railway_cpu_upscale_threshold,
    railway_memory_downscale_threshold,
    railway_cpu_downscale_threshold,
    upscale_cooldown,
    downscale_cooldown,
    min_replica_count,
    max_replica_count
FROM services
WHERE job_name IS NOT NULL
ORDER BY service_id
`

func (q *Queries) ListServicesWithJobs(ctx context.Context) ([]Service, error) {
	rows, err := q.db.QueryContext(ctx, listServicesWithJobs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Service
	for rows.Next() {
		var i Service
		if err := rows.Scan(
			&i.ServiceID,
			&i.JobName,
			&i.Enabled,
			&i.RailwayMemoryUpscaleThreshold,
			&i.RailwayCpuUpscaleThreshold,
			&i.RailwayMemoryDownscaleThreshold,
			&i.RailwayCpuDownscaleThreshold,
			&i.UpscaleCooldown,
			&i.DownscaleCooldown,
			&i.MinReplicaCount,
			&i.MaxReplicaCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setServiceEnabled = `-- name: SetServiceEnabled :one
UPDATE services
SET enabled = $1
WHERE service_id = $2
RETURNING
    service_id,
    job_name,
    railway_memory_upscale_threshold,
    railway_cpu_upscale_threshold,
    railway_memory_downscale_threshold,
    railway_cpu_downscale_threshold,
    upscale_cooldown,
    downscale_cooldown,
    min_replica_count,
    max_replica_count
`

type SetServiceEnabledParams struct {
	Enabled   bool   `json:"enabled"`
	ServiceID string `json:"service_id"`
}

type SetServiceEnabledRow struct {
	ServiceID                       string         `json:"service_id"`
	JobName                         sql.NullString `json:"job_name"`
	RailwayMemoryUpscaleThreshold   float64        `json:"railway_memory_upscale_threshold"`
	RailwayCpuUpscaleThreshold      float64        `json:"railway_cpu_upscale_threshold"`
	RailwayMemoryDownscaleThreshold float64        `json:"railway_memory_downscale_threshold"`
	RailwayCpuDownscaleThreshold    float64        `json:"railway_cpu_downscale_threshold"`
	UpscaleCooldown                 string         `json:"upscale_cooldown"`
	DownscaleCooldown               string         `json:"downscale_cooldown"`
	MinReplicaCount                 int32          `json:"min_replica_count"`
	MaxReplicaCount                 int32          `json:"max_replica_count"`
}

func (q *Queries) SetServiceEnabled(ctx context.Context, arg SetServiceEnabledParams) (SetServiceEnabledRow, error) {
	row := q.db.QueryRowContext(ctx, setServiceEnabled, arg.Enabled, arg.ServiceID)
	var i SetServiceEnabledRow
	err := row.Scan(
		&i.ServiceID,
		&i.JobName,
		&i.RailwayMemoryUpscaleThreshold,
		&i.RailwayCpuUpscaleThreshold,
		&i.RailwayMemoryDownscaleThreshold,
		&i.RailwayCpuDownscaleThreshold,
		&i.UpscaleCooldown,
		&i.DownscaleCooldown,
		&i.MinReplicaCount,
		&i.MaxReplicaCount,
	)
	return i, err
}

const updateService = `-- name: UpdateService :one
UPDATE services
SET
    job_name = $2,
    enabled = $3,
    railway_memory_upscale_threshold = $4,
    railway_cpu_upscale_threshold = $5,
    railway_memory_downscale_threshold = $6,
    railway_cpu_downscale_threshold = $7,
    upscale_cooldown = $8,
    downscale_cooldown = $9,
    min_replica_count = $10,
    max_replica_count = $11
WHERE service_id = $1
RETURNING
    service_id,
    job_name,
    enabled,
    railway_memory_upscale_threshold,
    railway_cpu_upscale_threshold,
    railway_memory_downscale_threshold,
    railway_cpu_downscale_threshold,
    upscale_cooldown,
    downscale_cooldown,
    min_replica_count,
    max_replica_count
`

type UpdateServiceParams struct {
	ServiceID                       string         `json:"service_id"`
	JobName                         sql.NullString `json:"job_name"`
	Enabled                         bool           `json:"enabled"`
	RailwayMemoryUpscaleThreshold   float64        `json:"railway_memory_upscale_threshold"`
	RailwayCpuUpscaleThreshold      float64        `json:"railway_cpu_upscale_threshold"`
	RailwayMemoryDownscaleThreshold float64        `json:"railway_memory_downscale_threshold"`
	RailwayCpuDownscaleThreshold    float64        `json:"railway_cpu_downscale_threshold"`
	UpscaleCooldown                 string         `json:"upscale_cooldown"`
	DownscaleCooldown               string         `json:"downscale_cooldown"`
	MinReplicaCount                 int32          `json:"min_replica_count"`
	MaxReplicaCount                 int32          `json:"max_replica_count"`
}

func (q *Queries) UpdateService(ctx context.Context, arg UpdateServiceParams) (Service, error) {
	row := q.db.QueryRowContext(ctx, updateService,
		arg.ServiceID,
		arg.JobName,
		arg.Enabled,
		arg.RailwayMemoryUpscaleThreshold,
		arg.RailwayCpuUpscaleThreshold,
		arg.RailwayMemoryDownscaleThreshold,
		arg.RailwayCpuDownscaleThreshold,
		arg.UpscaleCooldown,
		arg.DownscaleCooldown,
		arg.MinReplicaCount,
		arg.MaxReplicaCount,
	)
	var i Service
	err := row.Scan(
		&i.ServiceID,
		&i.JobName,
		&i.Enabled,
		&i.RailwayMemoryUpscaleThreshold,
		&i.RailwayCpuUpscaleThreshold,
		&i.RailwayMemoryDownscaleThreshold,
		&i.RailwayCpuDownscaleThreshold,
		&i.UpscaleCooldown,
		&i.DownscaleCooldown,
		&i.MinReplicaCount,
		&i.MaxReplicaCount,
	)
	return i, err
}
