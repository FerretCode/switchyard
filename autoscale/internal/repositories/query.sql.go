// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package repositories

import (
	"context"
	"database/sql"
)

const createService = `-- name: CreateService :one
INSERT INTO services (
    service_id, job_name
) VALUES (
    $1, $2
)
RETURNING service_id, job_name
`

type CreateServiceParams struct {
	ServiceID string         `json:"service_id"`
	JobName   sql.NullString `json:"job_name"`
}

func (q *Queries) CreateService(ctx context.Context, arg CreateServiceParams) (Service, error) {
	row := q.db.QueryRowContext(ctx, createService, arg.ServiceID, arg.JobName)
	var i Service
	err := row.Scan(&i.ServiceID, &i.JobName)
	return i, err
}

const deleteService = `-- name: DeleteService :exec
DELETE FROM services
WHERE service_id = $1
`

func (q *Queries) DeleteService(ctx context.Context, serviceID string) error {
	_, err := q.db.ExecContext(ctx, deleteService, serviceID)
	return err
}

const getService = `-- name: GetService :one
SELECT service_id, job_name FROM services
WHERE service_id = $1 LIMIT 1
`

func (q *Queries) GetService(ctx context.Context, serviceID string) (Service, error) {
	row := q.db.QueryRowContext(ctx, getService, serviceID)
	var i Service
	err := row.Scan(&i.ServiceID, &i.JobName)
	return i, err
}

const getServicesByJobName = `-- name: GetServicesByJobName :many
SELECT service_id, job_name FROM services
WHERE job_name = $1
ORDER BY service_id
`

func (q *Queries) GetServicesByJobName(ctx context.Context, jobName sql.NullString) ([]Service, error) {
	rows, err := q.db.QueryContext(ctx, getServicesByJobName, jobName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Service
	for rows.Next() {
		var i Service
		if err := rows.Scan(&i.ServiceID, &i.JobName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listServices = `-- name: ListServices :many
SELECT service_id, job_name FROM services
ORDER BY service_id
`

func (q *Queries) ListServices(ctx context.Context) ([]Service, error) {
	rows, err := q.db.QueryContext(ctx, listServices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Service
	for rows.Next() {
		var i Service
		if err := rows.Scan(&i.ServiceID, &i.JobName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listServicesWithJobs = `-- name: ListServicesWithJobs :many
SELECT service_id, job_name FROM services
WHERE job_name IS NOT NULL
ORDER BY service_id
`

func (q *Queries) ListServicesWithJobs(ctx context.Context) ([]Service, error) {
	rows, err := q.db.QueryContext(ctx, listServicesWithJobs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Service
	for rows.Next() {
		var i Service
		if err := rows.Scan(&i.ServiceID, &i.JobName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateService = `-- name: UpdateService :one
UPDATE services
SET job_name = $2
WHERE service_id = $1
RETURNING service_id, job_name
`

type UpdateServiceParams struct {
	ServiceID string         `json:"service_id"`
	JobName   sql.NullString `json:"job_name"`
}

func (q *Queries) UpdateService(ctx context.Context, arg UpdateServiceParams) (Service, error) {
	row := q.db.QueryRowContext(ctx, updateService, arg.ServiceID, arg.JobName)
	var i Service
	err := row.Scan(&i.ServiceID, &i.JobName)
	return i, err
}
