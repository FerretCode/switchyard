// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package repositories

import (
	"context"
)

const createIncidentReport = `-- name: CreateIncidentReport :one
INSERT INTO incident_reports (
    service_id,
    deployment_id,
    environment_id,
    message,
    timestamp
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, service_id, deployment_id, environment_id, message, timestamp
`

type CreateIncidentReportParams struct {
	ServiceID     string `json:"service_id"`
	DeploymentID  string `json:"deployment_id"`
	EnvironmentID string `json:"environment_id"`
	Message       string `json:"message"`
	Timestamp     int64  `json:"timestamp"`
}

func (q *Queries) CreateIncidentReport(ctx context.Context, arg CreateIncidentReportParams) (IncidentReport, error) {
	row := q.db.QueryRowContext(ctx, createIncidentReport,
		arg.ServiceID,
		arg.DeploymentID,
		arg.EnvironmentID,
		arg.Message,
		arg.Timestamp,
	)
	var i IncidentReport
	err := row.Scan(
		&i.ID,
		&i.ServiceID,
		&i.DeploymentID,
		&i.EnvironmentID,
		&i.Message,
		&i.Timestamp,
	)
	return i, err
}

const deleteIncidentReport = `-- name: DeleteIncidentReport :exec
DELETE FROM incident_reports
WHERE id = $1
`

func (q *Queries) DeleteIncidentReport(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteIncidentReport, id)
	return err
}

const getIncidentReport = `-- name: GetIncidentReport :one
SELECT id, service_id, deployment_id, environment_id, message, timestamp
FROM incident_reports
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetIncidentReport(ctx context.Context, id int32) (IncidentReport, error) {
	row := q.db.QueryRowContext(ctx, getIncidentReport, id)
	var i IncidentReport
	err := row.Scan(
		&i.ID,
		&i.ServiceID,
		&i.DeploymentID,
		&i.EnvironmentID,
		&i.Message,
		&i.Timestamp,
	)
	return i, err
}

const listIncidentReports = `-- name: ListIncidentReports :many
SELECT id, service_id, deployment_id, environment_id, message, timestamp
FROM incident_reports
ORDER BY timestamp DESC
LIMIT $1 OFFSET $2
`

type ListIncidentReportsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListIncidentReports(ctx context.Context, arg ListIncidentReportsParams) ([]IncidentReport, error) {
	rows, err := q.db.QueryContext(ctx, listIncidentReports, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IncidentReport
	for rows.Next() {
		var i IncidentReport
		if err := rows.Scan(
			&i.ID,
			&i.ServiceID,
			&i.DeploymentID,
			&i.EnvironmentID,
			&i.Message,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listIncidentReportsByService = `-- name: ListIncidentReportsByService :many
SELECT id, service_id, deployment_id, environment_id, message, timestamp
FROM incident_reports
WHERE service_id = $1
ORDER BY timestamp DESC
LIMIT $2 OFFSET $3
`

type ListIncidentReportsByServiceParams struct {
	ServiceID string `json:"service_id"`
	Limit     int32  `json:"limit"`
	Offset    int32  `json:"offset"`
}

func (q *Queries) ListIncidentReportsByService(ctx context.Context, arg ListIncidentReportsByServiceParams) ([]IncidentReport, error) {
	rows, err := q.db.QueryContext(ctx, listIncidentReportsByService, arg.ServiceID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IncidentReport
	for rows.Next() {
		var i IncidentReport
		if err := rows.Scan(
			&i.ID,
			&i.ServiceID,
			&i.DeploymentID,
			&i.EnvironmentID,
			&i.Message,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listIncidentReportsWithServiceID = `-- name: ListIncidentReportsWithServiceID :many
SELECT
    service_id,
    deployment_id,
    environment_id,
    message,
    timestamp
FROM incident_reports
WHERE service_id IS NOT NULL AND service_id <> ''
ORDER BY timestamp DESC
LIMIT $1
`

type ListIncidentReportsWithServiceIDRow struct {
	ServiceID     string `json:"service_id"`
	DeploymentID  string `json:"deployment_id"`
	EnvironmentID string `json:"environment_id"`
	Message       string `json:"message"`
	Timestamp     int64  `json:"timestamp"`
}

func (q *Queries) ListIncidentReportsWithServiceID(ctx context.Context, limit int32) ([]ListIncidentReportsWithServiceIDRow, error) {
	rows, err := q.db.QueryContext(ctx, listIncidentReportsWithServiceID, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListIncidentReportsWithServiceIDRow
	for rows.Next() {
		var i ListIncidentReportsWithServiceIDRow
		if err := rows.Scan(
			&i.ServiceID,
			&i.DeploymentID,
			&i.EnvironmentID,
			&i.Message,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listIncidentReportsWithoutServiceID = `-- name: ListIncidentReportsWithoutServiceID :many
SELECT
    service_id,
    deployment_id,
    environment_id,
    message,
    timestamp
FROM incident_reports
WHERE service_id IS NULL OR service_id = ''
ORDER BY timestamp DESC
LIMIT $1
`

type ListIncidentReportsWithoutServiceIDRow struct {
	ServiceID     string `json:"service_id"`
	DeploymentID  string `json:"deployment_id"`
	EnvironmentID string `json:"environment_id"`
	Message       string `json:"message"`
	Timestamp     int64  `json:"timestamp"`
}

func (q *Queries) ListIncidentReportsWithoutServiceID(ctx context.Context, limit int32) ([]ListIncidentReportsWithoutServiceIDRow, error) {
	rows, err := q.db.QueryContext(ctx, listIncidentReportsWithoutServiceID, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListIncidentReportsWithoutServiceIDRow
	for rows.Next() {
		var i ListIncidentReportsWithoutServiceIDRow
		if err := rows.Scan(
			&i.ServiceID,
			&i.DeploymentID,
			&i.EnvironmentID,
			&i.Message,
			&i.Timestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
